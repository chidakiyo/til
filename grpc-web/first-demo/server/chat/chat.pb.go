// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SpeakRequest struct {
	UserName             string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpeakRequest) Reset()         { *m = SpeakRequest{} }
func (m *SpeakRequest) String() string { return proto.CompactTextString(m) }
func (*SpeakRequest) ProtoMessage()    {}
func (*SpeakRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_59d1196038650677, []int{0}
}
func (m *SpeakRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeakRequest.Unmarshal(m, b)
}
func (m *SpeakRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeakRequest.Marshal(b, m, deterministic)
}
func (dst *SpeakRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeakRequest.Merge(dst, src)
}
func (m *SpeakRequest) XXX_Size() int {
	return xxx_messageInfo_SpeakRequest.Size(m)
}
func (m *SpeakRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeakRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SpeakRequest proto.InternalMessageInfo

func (m *SpeakRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *SpeakRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SpeakResponse struct {
	SpeakId              int32                `protobuf:"varint,1,opt,name=speak_id,json=speakId,proto3" json:"speak_id,omitempty"`
	UserName             string               `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Message              string               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	SpeakAt              *timestamp.Timestamp `protobuf:"bytes,4,opt,name=speak_at,json=speakAt,proto3" json:"speak_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SpeakResponse) Reset()         { *m = SpeakResponse{} }
func (m *SpeakResponse) String() string { return proto.CompactTextString(m) }
func (*SpeakResponse) ProtoMessage()    {}
func (*SpeakResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_59d1196038650677, []int{1}
}
func (m *SpeakResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeakResponse.Unmarshal(m, b)
}
func (m *SpeakResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeakResponse.Marshal(b, m, deterministic)
}
func (dst *SpeakResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeakResponse.Merge(dst, src)
}
func (m *SpeakResponse) XXX_Size() int {
	return xxx_messageInfo_SpeakResponse.Size(m)
}
func (m *SpeakResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeakResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpeakResponse proto.InternalMessageInfo

func (m *SpeakResponse) GetSpeakId() int32 {
	if m != nil {
		return m.SpeakId
	}
	return 0
}

func (m *SpeakResponse) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *SpeakResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SpeakResponse) GetSpeakAt() *timestamp.Timestamp {
	if m != nil {
		return m.SpeakAt
	}
	return nil
}

type ListenSpeakRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenSpeakRequest) Reset()         { *m = ListenSpeakRequest{} }
func (m *ListenSpeakRequest) String() string { return proto.CompactTextString(m) }
func (*ListenSpeakRequest) ProtoMessage()    {}
func (*ListenSpeakRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_59d1196038650677, []int{2}
}
func (m *ListenSpeakRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenSpeakRequest.Unmarshal(m, b)
}
func (m *ListenSpeakRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenSpeakRequest.Marshal(b, m, deterministic)
}
func (dst *ListenSpeakRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenSpeakRequest.Merge(dst, src)
}
func (m *ListenSpeakRequest) XXX_Size() int {
	return xxx_messageInfo_ListenSpeakRequest.Size(m)
}
func (m *ListenSpeakRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenSpeakRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenSpeakRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SpeakRequest)(nil), "chat.SpeakRequest")
	proto.RegisterType((*SpeakResponse)(nil), "chat.SpeakResponse")
	proto.RegisterType((*ListenSpeakRequest)(nil), "chat.ListenSpeakRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	Speak(ctx context.Context, in *SpeakRequest, opts ...grpc.CallOption) (*SpeakResponse, error)
	ListenSpeak(ctx context.Context, in *ListenSpeakRequest, opts ...grpc.CallOption) (ChatService_ListenSpeakClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Speak(ctx context.Context, in *SpeakRequest, opts ...grpc.CallOption) (*SpeakResponse, error) {
	out := new(SpeakResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Speak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListenSpeak(ctx context.Context, in *ListenSpeakRequest, opts ...grpc.CallOption) (ChatService_ListenSpeakClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/chat.ChatService/ListenSpeak", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceListenSpeakClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ListenSpeakClient interface {
	Recv() (*SpeakResponse, error)
	grpc.ClientStream
}

type chatServiceListenSpeakClient struct {
	grpc.ClientStream
}

func (x *chatServiceListenSpeakClient) Recv() (*SpeakResponse, error) {
	m := new(SpeakResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	Speak(context.Context, *SpeakRequest) (*SpeakResponse, error)
	ListenSpeak(*ListenSpeakRequest, ChatService_ListenSpeakServer) error
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Speak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Speak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Speak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Speak(ctx, req.(*SpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListenSpeak_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenSpeakRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ListenSpeak(m, &chatServiceListenSpeakServer{stream})
}

type ChatService_ListenSpeakServer interface {
	Send(*SpeakResponse) error
	grpc.ServerStream
}

type chatServiceListenSpeakServer struct {
	grpc.ServerStream
}

func (x *chatServiceListenSpeakServer) Send(m *SpeakResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Speak",
			Handler:    _ChatService_Speak_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenSpeak",
			Handler:       _ChatService_ListenSpeak_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_chat_59d1196038650677) }

var fileDescriptor_chat_59d1196038650677 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0xe5, 0xd2, 0xd2, 0xf6, 0x02, 0xcb, 0xc1, 0x60, 0xc2, 0x40, 0x95, 0xa9, 0x93, 0x5b,
	0x15, 0xb1, 0x22, 0x21, 0xc4, 0x80, 0x84, 0x18, 0x52, 0xf6, 0xca, 0x6d, 0x8f, 0x34, 0x02, 0xc7,
	0x21, 0xbe, 0xb0, 0xf2, 0x37, 0xf8, 0xb9, 0x28, 0x4e, 0x22, 0x25, 0x02, 0x36, 0xdf, 0xbb, 0xe7,
	0xf7, 0xfc, 0x19, 0x60, 0x77, 0xd0, 0xac, 0xf2, 0xc2, 0xb2, 0xc5, 0x61, 0x75, 0x0e, 0xaf, 0x12,
	0x6b, 0x93, 0x77, 0x5a, 0x78, 0x6d, 0x5b, 0xbe, 0x2e, 0x38, 0x35, 0xe4, 0x58, 0x9b, 0xbc, 0xb6,
	0x45, 0x0f, 0x70, 0xb2, 0xce, 0x49, 0xbf, 0xc5, 0xf4, 0x51, 0x92, 0x63, 0xbc, 0x84, 0x69, 0xe9,
	0xa8, 0xd8, 0x64, 0xda, 0x90, 0x14, 0x33, 0x31, 0x9f, 0xc6, 0x93, 0x4a, 0x78, 0xd6, 0x86, 0x50,
	0xc2, 0xd8, 0x90, 0x73, 0x3a, 0x21, 0x39, 0xf0, 0xab, 0x76, 0x8c, 0xbe, 0x05, 0x9c, 0x36, 0x39,
	0x2e, 0xb7, 0x99, 0x23, 0xbc, 0x80, 0x89, 0xab, 0x84, 0x4d, 0xba, 0xf7, 0x39, 0xa3, 0x78, 0xec,
	0xe7, 0xc7, 0x7d, 0xbf, 0x63, 0xf0, 0x7f, 0xc7, 0x51, 0xaf, 0x03, 0x6f, 0xda, 0x44, 0xcd, 0x72,
	0x38, 0x13, 0xf3, 0x60, 0x15, 0xaa, 0x1a, 0x4f, 0xb5, 0x78, 0xea, 0xa5, 0xc5, 0x6b, 0xda, 0xee,
	0x38, 0x3a, 0x07, 0x7c, 0x4a, 0x1d, 0x53, 0xd6, 0xe5, 0x5c, 0x7d, 0x41, 0x70, 0x7f, 0xd0, 0xbc,
	0xa6, 0xe2, 0x33, 0xdd, 0x11, 0x2e, 0x61, 0xe4, 0xd7, 0x88, 0xca, 0xff, 0x61, 0xd7, 0x1b, 0x9e,
	0xf5, 0xb4, 0x86, 0xef, 0x16, 0x82, 0x4e, 0x2c, 0xca, 0xda, 0xf3, 0xbb, 0xe9, 0xcf, 0xdb, 0x4b,
	0xb1, 0x3d, 0xf6, 0x6f, 0xbe, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xef, 0x00, 0xd5, 0x3b, 0xb4,
	0x01, 0x00, 0x00,
}
